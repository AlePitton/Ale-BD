{
  "paragraphs": [
    {
      "text": "print(s\"\"\"%html\n\u003ccenter\u003e\n    \u003ch1\u003eCurso Big Data Vates 2017\u003c/h1\u003e\n\u003c/center\u003e\n\n\u003cbr\u003e\n\n\u003ch2 style\u003d\"text-align:center;\"\u003e Damián Barsotti  \u003c/h2\u003e\n\n\u003ch3 style\u003d\"text-align:center;\"\u003e\n    \u003ca href\u003d\"http://www.famaf.unc.edu.ar\"\u003e\n    Facultad de Matemática Astronomía Física y Computación\n    \u003c/a\u003e\n\u003cbr/\u003e\n    \u003ca href\u003d\"http://www.unc.edu.ar\"\u003e\n    Universidad Nacional de Córdoba\n    \u003c/a\u003e\n\u003cbr/\u003e\n    \u003ccenter\u003e\n    \u003ca href\u003d\"http://www.famaf.unc.edu.ar\"\u003e\n    \u003cimg src\u003d\"$baseDir/comun/logo%20UNC%20FAMAF%202016.svg\" alt\u003d\"Drawing\" style\u003d\"width:50%;\"/\u003e\n    \u003c/a\u003e\n    \u003c/center\u003e\n\u003c/h3\u003e\n\n\u003cp style\u003d\"font-size:15px;\"\u003e\n    \u003cbr /\u003e\n        This work is licensed under a\n        \u003ca rel\u003d\"license\" href\u003d\"http://creativecommons.org/licenses/by-nc-sa/4.0/\"\u003eCreative Commons Attribution-NonCommercial-ShareAlike 4.0 International License\u003c/a\u003e.\n    \u003ca rel\u003d\"license\" href\u003d\"http://creativecommons.org/licenses/by-nc-sa/4.0/\"\u003e\n        \u003cimg alt\u003d\"Creative Commons License\" style\u003d\"border-width:0;vertical-align:middle;float:right\" src\u003d\"https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png\" /\u003e\n    \u003c/a\u003e\n\u003c/p\u003e\n\"\"\")\n",
      "user": "anonymous",
      "dateUpdated": "Nov 2, 2017 12:20:51 PM",
      "config": {
        "editorSetting": {
          "language": "scala"
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": true,
        "results": {},
        "enabled": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003ccenter\u003e\n    \u003ch1\u003eCurso Big Data Vates 2017\u003c/h1\u003e\n\u003c/center\u003e\n\n\u003cbr\u003e\n\n\u003ch2 style\u003d\"text-align:center;\"\u003e Damián Barsotti  \u003c/h2\u003e\n\n\u003ch3 style\u003d\"text-align:center;\"\u003e\n    \u003ca href\u003d\"http://www.famaf.unc.edu.ar\"\u003e\n    Facultad de Matemática Astronomía Física y Computación\n    \u003c/a\u003e\n\u003cbr/\u003e\n    \u003ca href\u003d\"http://www.unc.edu.ar\"\u003e\n    Universidad Nacional de Córdoba\n    \u003c/a\u003e\n\u003cbr/\u003e\n    \u003ccenter\u003e\n    \u003ca href\u003d\"http://www.famaf.unc.edu.ar\"\u003e\n    \u003cimg src\u003d\"https://bytebucket.org/bigdata_famaf/curso_vates/raw/HEAD/clases/comun/logo%20UNC%20FAMAF%202016.svg\" alt\u003d\"Drawing\" style\u003d\"width:50%;\"/\u003e\n    \u003c/a\u003e\n    \u003c/center\u003e\n\u003c/h3\u003e\n\n\u003cp style\u003d\"font-size:15px;\"\u003e\n    \u003cbr /\u003e\n        This work is licensed under a\n        \u003ca rel\u003d\"license\" href\u003d\"http://creativecommons.org/licenses/by-nc-sa/4.0/\"\u003eCreative Commons Attribution-NonCommercial-ShareAlike 4.0 International License\u003c/a\u003e.\n    \u003ca rel\u003d\"license\" href\u003d\"http://creativecommons.org/licenses/by-nc-sa/4.0/\"\u003e\n        \u003cimg alt\u003d\"Creative Commons License\" style\u003d\"border-width:0;vertical-align:middle;float:right\" src\u003d\"https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png\" /\u003e\n    \u003c/a\u003e\n\u003c/p\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1509535234917_-428756093",
      "id": "20171010-191319_1407757246",
      "dateCreated": "Nov 1, 2017 8:20:34 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Antes de comenzar",
      "text": "%md\n### Antes de comenzar\n#### En máquina virtual\n1. Lanzar terminal\n1. Actualizar repo:\n```sh\ncd curso_vates\ngit pull\n```\n1. Lanzar [Zeppelin](http://zeppelin.apache.org/):\n```sh\ncd\ncd spark/zeppelin-0.7.3-bin-all\n./bin/zeppelin-daemon.sh start\n```\n1. En navegador abrir [http://localhost:8080](http://localhost:8080)\n1. Seleccionar `Import note`\n1. Elegir json en `/home/guest/curso_vates/clases/06_grafos/note.json`\n2. Seleccionar `Clase 06 - Grandes Grafos Sociales`\n",
      "user": "anonymous",
      "dateUpdated": "Nov 2, 2017 12:20:51 PM",
      "config": {
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "title": false,
        "results": {},
        "enabled": false,
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eAntes de comenzar\u003c/h3\u003e\n\u003ch4\u003eEn máquina virtual\u003c/h4\u003e\n\u003col\u003e\n  \u003cli\u003eLanzar terminal\u003c/li\u003e\n  \u003cli\u003e\n  \u003cp\u003eActualizar repo:\u003c/p\u003e\n  \u003cpre\u003e\u003ccode class\u003d\"sh\"\u003ecd curso_vates\ngit pull\n\u003c/code\u003e\u003c/pre\u003e\u003c/li\u003e\n  \u003cli\u003e\n  \u003cp\u003eLanzar \u003ca href\u003d\"http://zeppelin.apache.org/\"\u003eZeppelin\u003c/a\u003e:\u003c/p\u003e\n  \u003cpre\u003e\u003ccode class\u003d\"sh\"\u003ecd\ncd spark/zeppelin-0.7.3-bin-all\n./bin/zeppelin-daemon.sh start\n\u003c/code\u003e\u003c/pre\u003e\u003c/li\u003e\n  \u003cli\u003eEn navegador abrir \u003ca href\u003d\"http://localhost:8080\"\u003ehttp://localhost:8080\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003eSeleccionar \u003ccode\u003eImport note\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003eElegir json en \u003ccode\u003e/home/guest/curso_vates/clases/06_grafos/note.json\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003eSeleccionar \u003ccode\u003eClase 06 - Grandes Grafos Sociales\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1509535234935_-421830612",
      "id": "20171026-104737_1316799732",
      "dateCreated": "Nov 1, 2017 8:20:34 AM",
      "dateStarted": "Nov 1, 2017 8:25:29 AM",
      "dateFinished": "Nov 1, 2017 8:25:30 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n# Grandes Grafos Sociales",
      "user": "anonymous",
      "dateUpdated": "Nov 2, 2017 12:20:51 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": false,
        "results": {},
        "editorSetting": {
          "language": "scala"
        },
        "editorMode": "ace/mode/scala",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch1\u003eGrandes Grafos Sociales\u003c/h1\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1509549050688_-263116938",
      "id": "20171101-121050_1177283744",
      "dateCreated": "Nov 1, 2017 12:10:50 PM",
      "dateStarted": "Nov 1, 2017 12:11:02 PM",
      "dateFinished": "Nov 1, 2017 12:11:02 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Load Tweets",
      "text": "\nval tweets \u003d spark.read.parquet(\"/home/guest/curso_vates/ds/tweets.pqt\")\ntweets.count\n\ntweets.show",
      "user": "anonymous",
      "dateUpdated": "Nov 2, 2017 1:11:42 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1509550810807_10163695",
      "id": "20171101-124010_495006264",
      "dateCreated": "Nov 1, 2017 12:40:10 PM",
      "dateStarted": "Nov 2, 2017 1:11:42 PM",
      "dateFinished": "Nov 2, 2017 1:12:07 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Generate users connections",
      "text": "val twitterConnections \u003d tweets\n                        .groupBy($\"user\", $\"RT_by\")\n                        .agg(sum($\"RT_times\").as(\"count_RT\"), count($\"*\").as(\"count_distinct_RT\"))\n\ntwitterConnections.count\n\nz.show(twitterConnections,5)\n",
      "user": "anonymous",
      "dateUpdated": "Nov 2, 2017 1:12:14 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1509549598960_-842952143",
      "id": "20171101-121958_1394663112",
      "dateCreated": "Nov 1, 2017 12:19:58 PM",
      "dateStarted": "Nov 2, 2017 1:12:14 PM",
      "dateFinished": "Nov 2, 2017 1:12:20 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## GraphFrames\n\n* Utiliza la interface Spark SQL (Dataframes).\n* Creada por [Databricks](https://databricks.com/).\n* Por ahora no viene en la distribución estandard de Spark (solo GraphX sobre RDD\u0027s).\n\n### Documentación:\n\n* [User Guide](https://graphframes.github.io/user-guide.html).\n* [Documentación de la APU](https://graphframes.github.io/api/scala/index.html#org.graphframes.GraphFrame).\n",
      "user": "anonymous",
      "dateUpdated": "Nov 2, 2017 12:20:52 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": false,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eGraphFrames\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003eUtiliza la interface Spark SQL (Dataframes).\u003c/li\u003e\n  \u003cli\u003eCreada por \u003ca href\u003d\"https://databricks.com/\"\u003eDatabricks\u003c/a\u003e.\u003c/li\u003e\n  \u003cli\u003ePor ahora no viene en la distribución estandard de Spark (solo GraphX sobre RDD\u0026rsquo;s).\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eDocumentación:\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e\u003ca href\u003d\"https://graphframes.github.io/user-guide.html\"\u003eUser Guide\u003c/a\u003e.\u003c/li\u003e\n  \u003cli\u003e\u003ca href\u003d\"https://graphframes.github.io/api/scala/index.html#org.graphframes.GraphFrame\"\u003eDocumentación de la APU\u003c/a\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1509632750478_-652118775",
      "id": "20171102-112550_410534992",
      "dateCreated": "Nov 2, 2017 11:25:50 AM",
      "dateStarted": "Nov 2, 2017 12:06:07 PM",
      "dateFinished": "Nov 2, 2017 12:06:09 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Rename edges columns",
      "text": "val edgesDF \u003d twitterConnections.select($\"user\".as(\"src\"), $\"RT_by\".as(\"dst\"),\n                                       $\"count_RT\", $\"count_distinct_RT\")\n",
      "user": "anonymous",
      "dateUpdated": "Nov 2, 2017 1:10:45 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1509550896384_-724013827",
      "id": "20171101-124136_101875926",
      "dateCreated": "Nov 1, 2017 12:41:36 PM",
      "dateStarted": "Nov 2, 2017 12:21:16 PM",
      "dateFinished": "Nov 2, 2017 12:21:22 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Create graph from edges",
      "text": "import org.graphframes._\n\n//descomenta el codigo a continuacion y crea una instancia de GraphFrame a partir del dataframe de links\nval graph \u003dGraphFrame.fromEdges(edgesDF)\n",
      "user": "anonymous",
      "dateUpdated": "Nov 2, 2017 1:13:30 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1509551259883_701772531",
      "id": "20171101-124739_82230555",
      "dateCreated": "Nov 1, 2017 12:47:39 PM",
      "dateStarted": "Nov 2, 2017 12:21:22 PM",
      "dateFinished": "Nov 2, 2017 12:21:23 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n### Operaciones básicas sobre grafos\n\nA continuación veremos como calcular: \n* la cantidad de vértices (usuarios)\n* la cantidad de arístas (conexiones)\n* el grado de cada vértice (cantidad de conexiones por usuario)",
      "user": "anonymous",
      "dateUpdated": "Nov 2, 2017 3:33:45 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": false,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eOperaciones básicas sobre grafos\u003c/h3\u003e\n\u003cp\u003eA continuación veremos como calcular:\u003cbr/\u003e* la cantidad de vértices (usuarios)\u003cbr/\u003e* la cantidad de arístas (conexiones)\u003cbr/\u003e* el grado de cada vértice (cantidad de conexiones por usuario)\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1509647462954_-537424126",
      "id": "20171102-153102_880120870",
      "dateCreated": "Nov 2, 2017 3:31:02 PM",
      "dateStarted": "Nov 2, 2017 3:33:30 PM",
      "dateFinished": "Nov 2, 2017 3:33:30 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Tamaño del grafo",
      "text": "val verticesCount \u003d graph.vertices.count\nprintln(\"Cantidad de nodos: \" + verticesCount)\n\nval edgesCount \u003d graph.edges.count\nprintln(\"Cantidad de conecciones: \" + edgesCount)\n",
      "user": "anonymous",
      "dateUpdated": "Nov 2, 2017 1:17:15 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1509551325603_273070311",
      "id": "20171101-124845_773490911",
      "dateCreated": "Nov 1, 2017 12:48:45 PM",
      "dateStarted": "Nov 2, 2017 12:21:22 PM",
      "dateFinished": "Nov 2, 2017 12:21:52 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Connections by user",
      "text": "val nodesDegree \u003d graph.degrees\n\nval sortedByDegree \u003d graph.degrees.orderBy($\"degree\".desc)\n\nz.show(sortedByDegree,10)\n",
      "user": "anonymous",
      "dateUpdated": "Nov 2, 2017 1:17:55 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala"
        },
        "editorMode": "ace/mode/scala",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1509639440142_2033559814",
      "id": "20171102-131720_1147432214",
      "dateCreated": "Nov 2, 2017 1:17:20 PM",
      "status": "READY",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## Collective influence\n\n### Aplicaciones: \n* Marketing viral (influencia de opinión)\n* Detección de focos de dispersión de enfermedades\n\n### Cómo funciona:\n* En cada iteración elimina del grafo el nodo de mayor CI y recalcula el CI de los nodos restantes\n* Termina cuando la componente gigante se destruye\n* Solución básica: \\\\(O(N2)\\\\). Optimizada: \\\\(O(NlogN)\\\\)\n\n\u003e Influence maximization in complex networks through optimal percolation” (Flaviano Morone, Hernán A. Makse, 27 Jun 2015) https://arxiv.org/abs/1506.08326\n\n\n",
      "user": "anonymous",
      "dateUpdated": "Nov 2, 2017 4:21:17 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": false,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eCollective influence\u003c/h2\u003e\n\u003ch3\u003eAplicaciones:\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003eMarketing viral (influencia de opinión)\u003c/li\u003e\n  \u003cli\u003eDetección de focos de dispersión de enfermedades\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eCómo funciona:\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003eEn cada iteración elimina del grafo el nodo de mayor CI y recalcula el CI de los nodos restantes\u003c/li\u003e\n  \u003cli\u003eTermina cuando la componente gigante se destruye\u003c/li\u003e\n  \u003cli\u003eSolución básica: \\(O(N2)\\). Optimizada: \\(O(NlogN)\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n  \u003cp\u003eInfluence maximization in complex networks through optimal percolation” (Flaviano Morone, Hernán A. Makse, 27 Jun 2015) \u003ca href\u003d\"https://arxiv.org/abs/1506.08326\"\u003ehttps://arxiv.org/abs/1506.08326\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1509639606313_-2002842542",
      "id": "20171102-132006_1774167041",
      "dateCreated": "Nov 2, 2017 1:20:06 PM",
      "dateStarted": "Nov 2, 2017 4:07:32 PM",
      "dateFinished": "Nov 2, 2017 4:07:32 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n### Ejercicio\n\nA continuación imaginemos que trabajamos en una empresa de telefonía que está por sacar al mercado un nuevo producto. El área de marketing quiere publicitar este producto a través de redes sociales y nos pide que detectemos a aquellos individuos que rápidamente harían viral nuestro nuevo producto de manera de contactarlos y ofrecérselos.\n\nPara lograr este objetivo vamos a calcular el **collective influence** de cada individuo de la red social Twitter que estamos usando de manera de pasarle al area de marketing el listado de individuos con mayor collective influence.\n\n\nCompletar el siguiente código para calcular la influencia colectiva.\n\n#### Ayuda:\n\nLos pasos para calcular collective influence son:\n\n* generar una nueva instancia de GraphFrame pero esta vez utilizando `nodesDegree` como el `DataFrame` de nodos ya que tenemos la información del degree de cada nodo.\n* importar `AggregateMessages`.\n* calcular collective influence de cada individuo usando `AggregateMessages` de `GraphFrame`\n* ordenar los individuos por su collective influence de mayor a menor\n* imprimir el listado de individuos\n\nLa formula de collective influence para un vértice \\\\(i\\\\) es:\n\n$$ CI(i) \u003d (degree_i -  1) \\times \\sum\\limits_{j \\in vecinos(i)} (degree_j -  1)$$\n\n#### Documentación para implementar con GraphFrames:\n\n* Documentación sobre [AggregateMessages](http://graphframes.github.io/user-guide.html#message-passing-via-aggregatemessages) con ejemplo.\n* Documentación de [API AggregateMessages](http://graphframes.github.io/api/scala/index.html#org.graphframes.lib.AggregateMessages).\n",
      "user": "anonymous",
      "dateUpdated": "Nov 2, 2017 4:21:27 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": false,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eEjercicio\u003c/h3\u003e\n\u003cp\u003eA continuación imaginemos que trabajamos en una empresa de telefonía que está por sacar al mercado un nuevo producto. El área de marketing quiere publicitar este producto a través de redes sociales y nos pide que detectemos a aquellos individuos que rápidamente harían viral nuestro nuevo producto de manera de contactarlos y ofrecérselos.\u003c/p\u003e\n\u003cp\u003ePara lograr este objetivo vamos a calcular el \u003cstrong\u003ecollective influence\u003c/strong\u003e de cada individuo de la red social Twitter que estamos usando de manera de pasarle al area de marketing el listado de individuos con mayor collective influence.\u003c/p\u003e\n\u003cp\u003eCompletar el siguiente código para calcular la influencia colectiva.\u003c/p\u003e\n\u003ch4\u003eAyuda:\u003c/h4\u003e\n\u003cp\u003eLos pasos para calcular collective influence son:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003egenerar una nueva instancia de GraphFrame pero esta vez utilizando \u003ccode\u003enodesDegree\u003c/code\u003e como el \u003ccode\u003eDataFrame\u003c/code\u003e de nodos ya que tenemos la información del degree de cada nodo.\u003c/li\u003e\n  \u003cli\u003eimportar \u003ccode\u003eAggregateMessages\u003c/code\u003e.\u003c/li\u003e\n  \u003cli\u003ecalcular collective influence de cada individuo usando \u003ccode\u003eAggregateMessages\u003c/code\u003e de \u003ccode\u003eGraphFrame\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003eordenar los individuos por su collective influence de mayor a menor\u003c/li\u003e\n  \u003cli\u003eimprimir el listado de individuos\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eLa formula de collective influence para un vértice \\(i\\) es:\u003c/p\u003e\n\u003cp\u003e$$ CI(i) \u003d (degree_i - 1) \\times \\sum\\limits_{j \\in vecinos(i)} (degree_j - 1)$$\u003c/p\u003e\n\u003ch4\u003eDocumentación para implementar con GraphFrames:\u003c/h4\u003e\n\u003cul\u003e\n  \u003cli\u003eDocumentación sobre \u003ca href\u003d\"http://graphframes.github.io/user-guide.html#message-passing-via-aggregatemessages\"\u003eAggregateMessages\u003c/a\u003e con ejemplo.\u003c/li\u003e\n  \u003cli\u003eDocumentación de \u003ca href\u003d\"http://graphframes.github.io/api/scala/index.html#org.graphframes.lib.AggregateMessages\"\u003eAPI AggregateMessages\u003c/a\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1509639544399_-1408264285",
      "id": "20171102-131904_821311339",
      "dateCreated": "Nov 2, 2017 1:19:04 PM",
      "dateStarted": "Nov 2, 2017 4:08:13 PM",
      "dateFinished": "Nov 2, 2017 4:08:13 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "//Cree un nuevo grafo usando los nodos con su degree disponible en nodesDegree y las aristas originales\nval degreeGraph \u003d GraphFrame(..., ... )\n\n//importamos AggregateMessages\nimport org.graphframes.lib.{AggregateMessages \u003d\u003e AM}\n\n/*\nComenzamos a calcular CI: Por cada nodo calcula la sumatoria del degree-1 de sus vecinos.\nEl DataFrame sumNeighborDegrees debe tener 2 columnas: id, sum_neighbor_degree \n*/\nval msgToSrc \u003d AM.dst(\"degree\") - 1\nval msgToDst \u003d AM.src(\"degree\") - 1\nval sumNeighborDegrees \u003d degreeGraph.aggregateMessages\n  .sendToSrc(msgToSrc)  // send destination user\u0027s age to source\n  .sendToDst(msgToDst)  // send source user\u0027s age to destination\n  .agg(...(AM.msg).as(\"sum_neighbor_degree\"))  // Hacer aggregation sobre el valor de AM.msg\n\n\n/*\nCalculamos CI: para terminar de calcular CI debemos multiplicar la sumatoria calculada en el paso anterior por el degree - 1 de \ncada nodo.\nAdemás se hace join de sumNeighborDegrees con degrees para tener todas las columnas necesarias para calcular CI.\nEl DataFrame collectiveInfluence debe tener 2 columnas: id, ci y degree\nPor ultimo ordena descendentemente por ci \n*/\nval collectiveInfluence \u003d nodesDegree.join(sumNeighborDegrees,\"id\")\n                          .select($\"id\", (($\"degree\" - 1)* $\"sum_neighbor_degree\").as(\"ci\"), $\"degree\")\n                          .sort(...)\n\nz.show(collectiveInfluence,20)\n",
      "user": "anonymous",
      "dateUpdated": "Nov 2, 2017 3:27:27 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1509551425048_-728092300",
      "id": "20171101-125025_1054455316",
      "dateCreated": "Nov 1, 2017 12:50:25 PM",
      "dateStarted": "Nov 2, 2017 12:21:23 PM",
      "dateFinished": "Nov 2, 2017 12:22:46 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## Visualización\n\nA continuación visualizaremos con [Gephi](https://gephi.org/) la parte del grafo (subgrafo) que contiene los mayores influencers.\n\nPara ello generaremos archivos *csv* como entrada de esta herramienta ",
      "user": "anonymous",
      "dateUpdated": "Nov 2, 2017 4:20:39 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": false,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eVisualización\u003c/h2\u003e\n\u003cp\u003eA continuación visualizaremos con \u003ca href\u003d\"https://gephi.org/\"\u003eGephi\u003c/a\u003e la parte del grafo (subgrafo) que contiene los mayores influencers.\u003c/p\u003e\n\u003cp\u003ePara ello generaremos archivos \u003cem\u003ecsv\u003c/em\u003e como entrada de esta herramienta\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1509649776954_529827163",
      "id": "20171102-160936_360694508",
      "dateCreated": "Nov 2, 2017 4:09:36 PM",
      "dateStarted": "Nov 2, 2017 4:14:04 PM",
      "dateFinished": "Nov 2, 2017 4:14:04 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "import org.apache.spark.sql.SaveMode\nval minCI : Long \u003d 29000000\nval minDegree : Long \u003d 600\n\n// tomo los usarios con mayor influencia o con más conecciones\nval ciTops \u003d collectiveInfluence.filter($\"ci\" \u003e\u003d minCI || $\"degree\" \u003e\u003d minDegree)\n\nval gInfluencers \u003d GraphFrame(ciTops, graph.edges)\n\nval veTops \u003d gInfluencers.find(\"(a)-[e]-\u003e(b)\")//.printSchema\n                .cache\n\nveTops.count\n\nval eTops \u003d veTops.select($\"e.*\")\n\neTops.printSchema\n\nval gTops \u003d GraphFrame(ciTops, eTops)\n\n\ngTops.vertices.select($\"*\", $\"id\".as(\"Label\")).coalesce(1)\n    .write.mode(SaveMode.Overwrite).option(\"header\",true)\n     .csv(\"/home/guest/curso_vates/ds/top_influencers.csv\")\n\ngTops.edges.select($\"src\".as(\"Source\"), $\"dst\".as(\"Target\"), $\"count_RT\",$\"count_distinct_RT\")\n     .coalesce(1)\n     .write.mode(SaveMode.Overwrite).option(\"header\",true)\n     .csv(\"/home/guest/curso_vates/ds/top_edges.csv\")\n\n",
      "user": "anonymous",
      "dateUpdated": "Nov 2, 2017 4:18:07 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala"
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1509591834812_-1570037108",
      "id": "20171102-000354_1806019706",
      "dateCreated": "Nov 2, 2017 12:03:54 AM",
      "dateStarted": "Nov 2, 2017 12:21:52 PM",
      "dateFinished": "Nov 2, 2017 12:24:32 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n### Gephi\n\nLanzar el programa desde una terminal ejecutando:\n\n```sh\ncd\nspark/gephi-0.9.2/bin/gephi\n```\n\nSeguir las instrucciones del profesor.",
      "user": "anonymous",
      "dateUpdated": "Nov 2, 2017 4:20:30 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": false,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eGephi\u003c/h3\u003e\n\u003cp\u003eLanzar el programa desde una terminal ejecutando:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class\u003d\"sh\"\u003ecd\nspark/gephi-0.9.2/bin/gephi\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eSeguir las instrucciones del profesor.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1509650054336_1502070665",
      "id": "20171102-161414_1207858851",
      "dateCreated": "Nov 2, 2017 4:14:14 PM",
      "dateStarted": "Nov 2, 2017 4:16:42 PM",
      "dateFinished": "Nov 2, 2017 4:16:42 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n\u003eAntes de terminar llene el formulario en [https://goo.gl/forms/zRadmfVCsxXFkohY2](https://goo.gl/forms/zRadmfVCsxXFkohY2).\n",
      "user": "anonymous",
      "dateUpdated": "Nov 2, 2017 4:22:42 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": false,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cblockquote\u003e\n  \u003cp\u003eAntes de terminar llene el formulario en \u003ca href\u003d\"https://goo.gl/forms/zRadmfVCsxXFkohY2\"\u003ehttps://goo.gl/forms/zRadmfVCsxXFkohY2\u003c/a\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1509638498893_1981699743",
      "id": "20171102-130138_490210310",
      "dateCreated": "Nov 2, 2017 1:01:38 PM",
      "dateStarted": "Nov 2, 2017 4:22:36 PM",
      "dateFinished": "Nov 2, 2017 4:22:36 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n### Ejercicio\n\nComplete el siguiente programa para calcular el grafo de todas las posibles conexiones a los 5 mayores influenciadores y graficar el resultado con Gephi. \n\n#### Ayuda\n* Busque en la documentación [Api Datasets](http://spark.apache.org/docs/latest/api/scala/index.html#org.apache.spark.sql.Dataset) algún método que devuelva las *n* primeras files de un Dataset equivalente a la directiva SQL `LIMIT`. \n* Para llenar el comando `find` busque la documentación de [Motif finding](https://graphframes.github.io/user-guide.html#motif-finding).",
      "user": "anonymous",
      "dateUpdated": "Nov 2, 2017 4:20:22 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": false,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eEjercicio\u003c/h3\u003e\n\u003cp\u003eComplete el siguiente programa para calcular el grafo de todas las posibles conexiones a los 5 mayores influenciadores y graficar el resultado con Gephi. \u003c/p\u003e\n\u003ch4\u003eAyuda\u003c/h4\u003e\n\u003cul\u003e\n  \u003cli\u003eBusque en la documentación \u003ca href\u003d\"http://spark.apache.org/docs/latest/api/scala/index.html#org.apache.spark.sql.Dataset\"\u003eApi Datasets\u003c/a\u003e algún método que devuelva las \u003cem\u003en\u003c/em\u003e primeras files de un Dataset equivalente a la directiva SQL \u003ccode\u003eLIMIT\u003c/code\u003e.\u003c/li\u003e\n  \u003cli\u003ePara llenar el comando \u003ccode\u003efind\u003c/code\u003e busque la documentación de \u003ca href\u003d\"https://graphframes.github.io/user-guide.html#motif-finding\"\u003eMotif finding\u003c/a\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1509631542806_-496625501",
      "id": "20171102-110542_600666434",
      "dateCreated": "Nov 2, 2017 11:05:42 AM",
      "dateStarted": "Nov 2, 2017 4:20:17 PM",
      "dateFinished": "Nov 2, 2017 4:20:17 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "// take top n\nval topInfluencers \u003d collectiveInfluence... // solo los 5 primeros\n\nimport org.apache.spark.sql.SaveMode\n\n// Guardo Vértices\ntopInfluencers.select($\"*\", $\"id\".as(\"Label\")).coalesce(1)\n    .write.mode(SaveMode.Overwrite).option(\"header\",true).csv(\"/home/guest/curso_vates/ds/top_influencers2.csv\")\n\n\nval gTops2 \u003d GraphFrame(topInfluencers, graph.edges)\n\nval eTops2 \u003d gTops2.find(\"...\") // Encuentre las aristas que tienen nodos\n    .select($\"e.src\".as(\"Source\"),$\"e.dst\".as(\"Target\"),$\"e.count_RT\",$\"e.count_distinct_RT\")\n\neTops2.coalesce(1)\n        .write.mode(SaveMode.Overwrite).option(\"header\",true).csv(\"/home/guest/curso_vates/ds/top_edges2.csv\")\n",
      "user": "anonymous",
      "dateUpdated": "Nov 2, 2017 12:59:39 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala"
        },
        "editorMode": "ace/mode/scala",
        "title": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1509566782871_863240286",
      "id": "20171101-170622_751215254",
      "dateCreated": "Nov 1, 2017 5:06:22 PM",
      "dateStarted": "Nov 2, 2017 12:25:51 PM",
      "dateFinished": "Nov 2, 2017 12:26:33 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "FIN",
      "text": "val baseDir\u003d\"https://bytebucket.org/bigdata_famaf/curso_vates/raw/HEAD/clases\"\nz.put(\"baseDir\", baseDir)\nprint(\"\"\"%html\n\u003cscript\u003e\n    var heads \u003d document.getElementsByTagName(\u0027h2\u0027);\n    var numHeads \u003d heads.length;\n    var inner \u003d \"\";\n    var i \u003d 0;\n    var j \u003d 0;\n    while (i \u003c numHeads){\n        inner \u003d heads[i].innerHTML;\n        if (inner.search(\".-\") !\u003d -1 ) {\n            j++;\n            heads[i].innerHTML \u003d inner.replace(/(~|\\d+)\\.-/,\"\"+j+\".-\");\n        }\n        i++\n    }\n\u003c/script\u003e\n\"\"\")",
      "user": "anonymous",
      "dateUpdated": "Nov 2, 2017 12:20:54 PM",
      "config": {
        "tableHide": true,
        "editorSetting": {
          "language": "scala"
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": true,
        "title": true,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "baseDir: String \u003d https://bytebucket.org/bigdata_famaf/curso_vates/raw/HEAD/clases\n"
          },
          {
            "type": "HTML",
            "data": "\u003cscript\u003e\n    var heads \u003d document.getElementsByTagName(\u0027h2\u0027);\n    var numHeads \u003d heads.length;\n    var inner \u003d \"\";\n    var i \u003d 0;\n    var j \u003d 0;\n    while (i \u003c numHeads){\n        inner \u003d heads[i].innerHTML;\n        if (inner.search(\".-\") !\u003d -1 ) {\n            j++;\n            heads[i].innerHTML \u003d inner.replace(/(~|\\d+)\\.-/,\"\"+j+\".-\");\n        }\n        i++\n    }\n\u003c/script\u003e\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1509535234941_-425678102",
      "id": "20171010-191336_1667301043",
      "dateCreated": "Nov 1, 2017 8:20:34 AM",
      "dateStarted": "Nov 2, 2017 12:22:47 PM",
      "dateFinished": "Nov 2, 2017 12:24:33 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "user": "anonymous",
      "dateUpdated": "Nov 2, 2017 12:20:54 PM",
      "config": {
        "colWidth": 12.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala"
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1509535234947_-340263846",
      "id": "20171010-192055_1187380897",
      "dateCreated": "Nov 1, 2017 8:20:34 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "Clase 06 - Grandes Grafos Sociales",
  "id": "2CYU1HMY1",
  "angularObjects": {
    "2CU68GG2T:shared_process": [],
    "2CVS7262B:shared_process": [],
    "2CVRPE6UU:shared_process": [],
    "2CTT1QYY4:shared_process": [],
    "2CU5AU361:shared_process": [],
    "2CTT6BV2A:shared_process": [],
    "2CTEY6NNX:shared_process": [],
    "2CTQZEXVV:shared_process": [],
    "2CWGC7XHC:shared_process": [],
    "2CU7MZATZ:shared_process": [],
    "2CV2DAAF4:shared_process": [],
    "2CUZ7QHXW:shared_process": [],
    "2CWKV4BU5:shared_process": [],
    "2CTEAQKGK:shared_process": [],
    "2CW7DKJPA:shared_process": [],
    "2CVA1M5RT:shared_process": [],
    "2CT3EKZSX:shared_process": [],
    "2CTVFSDYS:shared_process": [],
    "2CW7VCDNZ:shared_process": []
  },
  "config": {},
  "info": {}
}